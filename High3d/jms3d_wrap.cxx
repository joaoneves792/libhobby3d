/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


        #include "shader.h"
        #include "ms3d.h"
        #include "Tex.h"
        #include "GLM.h"
        #include "Lights.h"
        #include "Shadows.h"
        #include "Text.h"
        #include "Body.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1shader(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  shader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (shader *)new shader(arg1,arg2);
  *(shader **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_delete_1shader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  shader *arg1 = (shader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(shader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_shader_1getShader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shader *arg1 = (shader *) 0 ;
  GLuint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shader **)&jarg1; 
  result = (arg1)->getShader();
  *(GLuint **)&jresult = new GLuint((const GLuint &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_shader_1use(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  shader *arg1 = (shader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shader **)&jarg1; 
  (arg1)->use();
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1ms3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  ms3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ms3d *)new ms3d(arg1,arg2,arg3,arg4,arg5);
  *(ms3d **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1ms3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ms3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ms3d *)new ms3d(arg1,arg2,arg3,arg4);
  *(ms3d **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1ms3d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ms3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (ms3d *)new ms3d(arg1,arg2,arg3);
  *(ms3d **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1ms3d_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ms3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (ms3d *)new ms3d(arg1,arg2);
  *(ms3d **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1ms3d_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ms3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ms3d *)new ms3d(arg1);
  *(ms3d **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1ms3d_1_1SWIG_15(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ms3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ms3d *)new ms3d();
  *(ms3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_delete_1ms3d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ms3d *arg1 = (ms3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ms3d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1draw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ms3d *arg1 = (ms3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  (arg1)->draw();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1drawGL3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ms3d *arg1 = (ms3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  (arg1)->drawGL3();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1createRectangle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jint jarg4) {
  ms3d *arg1 = (ms3d *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->createRectangle(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1translateModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  ms3d *arg1 = (ms3d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->translateModel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1changeRectangleTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ms3d *arg1 = (ms3d *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->changeRectangleTexture(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1prepare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ms3d *arg1 = (ms3d *) 0 ;
  shader *arg2 = (shader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ms3d **)&jarg1; 
  arg2 = *(shader **)&jarg2; 
  (arg1)->prepare(arg2);
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1getJointPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ms3d *arg1 = (ms3d *) 0 ;
  char *arg2 = (char *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (float *)(arg1)->getJointPosition(arg2);
  *(float **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1changeTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ms3d *arg1 = (ms3d *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->changeTexture(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1changeMaterialEmissive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  ms3d *arg1 = (ms3d *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->changeMaterialEmissive(arg2,arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1changeMaterialTransparency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  ms3d *arg1 = (ms3d *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ms3d **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  (arg1)->changeMaterialTransparency(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_ms3d_1initGlew(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  ms3d::initGlew();
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1Tex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Tex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Tex *)new Tex(arg1);
  *(Tex **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Tex_1getTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Tex *arg1 = (Tex *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tex **)&jarg1; 
  result = (int)(arg1)->getTexture();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Tex_1genTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  Tex *arg1 = (Tex *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tex **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->genTexture(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_delete_1Tex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tex *arg1 = (Tex *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tex **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_MODEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_VIEW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_PROJECTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1GLM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shader *arg1 = (shader *) 0 ;
  GLM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shader **)&jarg1; 
  result = (GLM *)new GLM(arg1);
  *(GLM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_delete_1GLM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GLM *arg1 = (GLM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GLM **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1selectMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GLM *arg1 = (GLM *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->selectMatrix(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1perspective(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->perspective(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1otho(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->otho(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1lookAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10) {
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  (arg1)->lookAt(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1loadIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GLM *arg1 = (GLM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  (arg1)->loadIdentity();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->translate(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  GLM *arg1 = (GLM *) 0 ;
  float arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->rotate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->scale(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1billboard(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->billboard(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1pushMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GLM *arg1 = (GLM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  (arg1)->pushMatrix();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1popMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GLM *arg1 = (GLM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  (arg1)->popMatrix();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1changeShader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GLM *arg1 = (GLM *) 0 ;
  shader *arg2 = (shader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = *(shader **)&jarg2; 
  (arg1)->changeShader(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1rotateNormalizedAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  GLM *arg1 = (GLM *) 0 ;
  float arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  (arg1)->rotateNormalizedAxis(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GLM *arg1 = (GLM *) 0 ;
  glm::mat4 arg2 ;
  glm::mat4 *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  argp2 = *(glm::mat4 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null glm::mat4");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->multiply(arg2);
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1getMVP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  glm::mat4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  result = (arg1)->getMVP();
  *(glm::mat4 **)&jresult = new glm::mat4((const glm::mat4 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1get2DPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int *)(arg1)->get2DPoint(arg2,arg3,arg4,arg5,arg6);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1vectorRotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jfloat jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  float arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  glm::vec3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  result = (arg1)->vectorRotate(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(glm::vec3 **)&jresult = new glm::vec3((const glm::vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1normalizeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  glm::vec3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (arg1)->normalizeVector(arg2,arg3,arg4);
  *(glm::vec3 **)&jresult = new glm::vec3((const glm::vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1normalizeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  glm::vec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->normalizeVector(arg2,arg3);
  *(glm::vec2 **)&jresult = new glm::vec2((const glm::vec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1crossProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  glm::vec3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->crossProduct(arg2,arg3,arg4,arg5,arg6,arg7);
  *(glm::vec3 **)&jresult = new glm::vec3((const glm::vec3 &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1dotProduct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jdouble jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (double)(arg1)->dotProduct(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1dotProduct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (double)(arg1)->dotProduct(arg2,arg3,arg4,arg5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_GLM_1vectorLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (double)(arg1)->vectorLength(arg2,arg3,arg4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_MAX_1LIGHTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1Lights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  shader *arg1 = (shader *) 0 ;
  Lights *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(shader **)&jarg1; 
  result = (Lights *)new Lights(arg1);
  *(Lights **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_delete_1Lights(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Lights *arg1 = (Lights *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Lights **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Lights_1enableLighting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Lights *arg1 = (Lights *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Lights **)&jarg1; 
  (arg1)->enableLighting();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Lights_1disableLighting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Lights *arg1 = (Lights *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Lights **)&jarg1; 
  (arg1)->disableLighting();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Lights_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Lights *arg1 = (Lights *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Lights **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Lights_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Lights *arg1 = (Lights *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Lights **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->disable(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Lights_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  Lights *arg1 = (Lights *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Lights **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->setColor(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Lights_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  Lights *arg1 = (Lights *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Lights **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->setPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Lights_1setCone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  Lights *arg1 = (Lights *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Lights **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->setCone(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1Shadows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jlong jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  shader *arg2 = (shader *) 0 ;
  shader *arg3 = (shader *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  Shadows *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = *(shader **)&jarg2; 
  arg3 = *(shader **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (Shadows *)new Shadows(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(Shadows **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_delete_1Shadows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Shadows *arg1 = (Shadows *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Shadows **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Shadows_1prepareToMapDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  Shadows *arg1 = (Shadows *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shadows **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->prepareToMapDepth(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Shadows_1changeOrthoBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  Shadows *arg1 = (Shadows *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shadows **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->changeOrthoBox(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Shadows_1returnToNormalDrawing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Shadows *arg1 = (Shadows *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shadows **)&jarg1; 
  (arg1)->returnToNormalDrawing();
}


SWIGEXPORT jint JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Shadows_1getShadowTexture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Shadows *arg1 = (Shadows *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shadows **)&jarg1; 
  result = (int)(arg1)->getShadowTexture();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Shadows_1setShadowType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Shadows *arg1 = (Shadows *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Shadows **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setShadowType(arg2);
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1Text(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  Text *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (Text *)new Text(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(Text **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_delete_1Text(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Text *arg1 = (Text *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Text **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Text_1drawTextLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  Text *arg1 = (Text *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Text **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  (arg1)->drawTextLine(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_new_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  GLM *arg1 = (GLM *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GLM **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (Body *)new Body(arg1,arg2,arg3,arg4,arg5);
  *(Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1setAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jdouble jarg10) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  (arg1)->setAxis(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_delete_1Body(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Body *arg1 = (Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Body **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Body *arg1 = (Body *) 0 ;
  glm::vec3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  result = (arg1)->getPosition();
  *(glm::vec3 **)&jresult = new glm::vec3((const glm::vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1getForwardsVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Body *arg1 = (Body *) 0 ;
  glm::vec3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  result = (arg1)->getForwardsVector();
  *(glm::vec3 **)&jresult = new glm::vec3((const glm::vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1getUpVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Body *arg1 = (Body *) 0 ;
  glm::vec3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  result = (arg1)->getUpVector();
  *(glm::vec3 **)&jresult = new glm::vec3((const glm::vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1getLeftVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Body *arg1 = (Body *) 0 ;
  glm::vec3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  result = (arg1)->getLeftVector();
  *(glm::vec3 **)&jresult = new glm::vec3((const glm::vec3 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1getVelocityVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Body *arg1 = (Body *) 0 ;
  glm::vec3 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  result = (arg1)->getVelocityVector();
  *(glm::vec3 **)&jresult = new glm::vec3((const glm::vec3 &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1setY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1setZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setZ(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1setDrag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDrag(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1addForwardForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addForwardForce(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1addForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->addForce(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1setVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setVelocity(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1integrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Body *arg1 = (Body *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->integrate(arg2);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1updateRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  Body *arg1 = (Body *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->updateRotation(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1rotateToAlignWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->rotateToAlignWith(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1rotateToAlignWithLerp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jfloat jarg5) {
  Body *arg1 = (Body *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->rotateToAlignWithLerp(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1applyRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Body *arg1 = (Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  (arg1)->applyRotation();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1applyPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Body *arg1 = (Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  (arg1)->applyPosition();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1applyNegativePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Body *arg1 = (Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  (arg1)->applyNegativePosition();
}


SWIGEXPORT void JNICALL Java_warpenguin_joao_ms3d_jms3dJNI_Body_1applyNegativeRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Body *arg1 = (Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Body **)&jarg1; 
  (arg1)->applyNegativeRotation();
}


#ifdef __cplusplus
}
#endif

